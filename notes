Class 1
Cucumber -

BDD - behavioral driven development

gherkin

group id - org.syntax
artifact id - hrmsb19

src -
    main - to develop the application
    test - to test the application

    delete main folder because we don't need it

    in test - we have
        java - for technical stuff
        resources - for non technical stuff

now we have - java, selenium, cucumber, apache, commons io


scenario - BDD -
the file where we write BDD scenarios, we call it feature file

In one user story - we have multiple test cases
similarly, in one feature file, we write multiple scenarios for that user story

 rules of steps - dont add any space or any char after implementing step definition
 dont write duplicate step def, just one step definition should exist
 you can call steps in feature multiple times, but in back-end there should be only one step
 definition


Search employee -

Search employee by id -
    Given user is navigated to HRMS application
    When user enters valid username and password
    And user clicks on login button
    Then user is successfully logged in
    When user clicks on PIM option
    And user clicks on employee list option
    When user enters valid employee id
    And user clicks on search button
    Then user see the employee information


we have scenarios written in feature file
we have step definitions in steps classes

all test scenarios are executing properly

we are calling methods from common methods class
we are using selenium webdriver from common methods class

runner class - it is considered as the most important class of cucumber

3 important classes in cucumber
feature file
step definition

runner class - we can execute all of the scenarios, some of the scenarios,
one of the scenarios from this class
we can generate all the step definitions in just one click
we can generate reports also from this class
we can separate scenarios also from this class

Class 2 -
recap -
cucumber -
feature file in which we write all the scenarios
step definition class where all the step definitions are available
runner class - all the test cases we execute from runner class

maven project -
artifact id - project name
group id - company name

main - development
test - to test the application
 test - java and resources - for all technical part we need java and for all
 non tech part we need resources

Background -
it allows us to write all duplicate steps in one feature file till the time flow is
not broken at one place.

once the flow is broken, we cannot write steps in background.
one background is applicable for one feature file it means for every feature file
background will be different

tags = if we need to execute specific scenarios, we use tag name here
we can add multiple tags to one scenario
we can give any name to tag

Hooks - in cucumber, hooks we use to mention pre condition and post condition
of the complete project. It means for all the feature files, we have common
pre condition and post condition such as opening the browser and closing the browser

RULE: Hooks class will be implemented under steps package

Background vs hooks -

hooks are applicable for complete project (all feature files)
background is applicable only for one feature file

in background we keep all the common steps for one feature file
in Hooks we keep only pre conditions and post conditions of the entire project

Data driven testing - when your one test case executes against multiple sets of data

Class 3
Recap -

background -

in one feature file, if we have some steps which are common across all the scenarios
then we can write them in background but only till the point where flow is not broken

background is applicable only for one feature file, for every feature file, background
will be different

hooks -

before and after - pre condition and post condition
hooks class will always be under steps package

tags - in order to execute scenarios/test cases in groupd, we use tags

hard coded data - it is strictly prohibited
data should be parameterized - scripts should be generic

from feature file, we can pass the data in scenario itself.
this type of scenario will be applicable to implement for just one data set

scripts should be generic, it should be data driven testing

when one script executes against multiple sets of data, then we call it data
driven testing
in order to implement ddt in cucumber, we use scenario outline with examples table

Page object model design pattern -

we create object repository of every page in individual class















